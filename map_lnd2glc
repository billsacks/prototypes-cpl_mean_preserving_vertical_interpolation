#!/usr/bin/env python

from __future__ import print_function
from __future__ import division

import sys
import os.path
import traceback

if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
        ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

import argparse

import numpy as np
import math
import bisect
from netCDF4 import Dataset

from interpolator import Interpolator
from utils import find_index_from_lat_lon, get_l2x_data

# ------------------------------------------------------------------------
# Parameters
# ------------------------------------------------------------------------

ELEVCLASS_BOUNDS = [0., 200., 400., 700., 1000., 1300., 1600.,
                    2000., 2500., 3000., 10000.]
NUM_EC = 10

# ------------------------------------------------------------------------
# Begin main code
# ------------------------------------------------------------------------


def commandline_options():
    """Process command-line arguments"""

    parser = argparse.ArgumentParser(
        description = 'Map lnd cpl values to glc'
        )

    parser.add_argument('--cplhist_filename', required=True,
                        help='path to cpl hist file')

    parser.add_argument('--map_filename', required=True,
                        help='path to lnd2glc mapping file')

    parser.add_argument('--output_filename', required=True,
                        help='path to output file')

    parser.add_argument('--backtrace', action='store_true',
                        help='show exception backtraces as extra debugging output')

    options = parser.parse_args()
    return options

def any_in_wrong_class(topo):
    in_wrong_class = False
    for ec in range(NUM_EC):
        if ec > 0:
            if (topo[ec] - ELEVCLASS_BOUNDS[ec] < -1e-6):
                in_wrong_class = True
        if ec < NUM_EC - 1:
            if (topo[ec] - ELEVCLASS_BOUNDS[ec+1] > 1e-6):
                in_wrong_class = True

    return in_wrong_class


def get_elevclass(topo):
    ec = bisect.bisect_left(ELEVCLASS_BOUNDS, topo)
    if (ec < 0):
        ec = 0
    if (ec >= NUM_EC):
        ec = NUM_EC - 1
    return ec
get_elevclass_vec = np.vectorize(get_elevclass)

def main(options):
    mapfile = Dataset(options.map_filename)
    cplhist = Dataset(options.cplhist_filename)

    col = mapfile.variables['col'][:]
    row = mapfile.variables['row'][:]
    S = mapfile.variables['S'][:]
    xc_a = mapfile.variables['xc_a'][:]
    yc_a = mapfile.variables['yc_a'][:]
    xc_b = mapfile.variables['xc_b'][:] * 180./math.pi
    yc_b = mapfile.variables['yc_b'][:] * 180./math.pi
    doml_lon = cplhist.variables['doml_lon'][:]
    doml_lat = cplhist.variables['doml_lat'][:]
    domg_lon = cplhist.variables['domg_lon'][:]
    domg_lat = cplhist.variables['domg_lat'][:]
    g2x_ice = cplhist.variables['g2x_Sg_ice_covered'][:]
    g2x_topo = cplhist.variables['g2x_Sg_topo'][:]

    cism_ec = get_elevclass_vec(g2x_topo)

    lnd_pts = np.unique(col)
    cism_shape = g2x_ice.shape
    cism_data = np.zeros(cism_shape)
    cism_glint_data = np.zeros(cism_shape)
    cism_land_index = np.zeros(cism_shape)
    cism_assigned = np.zeros(cism_shape, dtype=bool)

    for lnd_pt in lnd_pts:
        # Get topo & smb for this land cell
        lnd_lat = yc_a[lnd_pt]
        lnd_lon = xc_a[lnd_pt]
        cplhist_index = find_index_from_lat_lon(doml_lat, doml_lon, lnd_lat, lnd_lon)
        (topo, smb) = get_l2x_data(cplhist, cplhist_index)

        # If this land cell has data, remap it to cism cells
        if np.logical_and(np.all(topo < 1e29), np.all(smb < 1e29)):
            if (any_in_wrong_class(topo)):
                continue
            interpolator = Interpolator(ELEVCLASS_BOUNDS, topo, smb)

            # Find overlaps where this land cell is responsible for more than
            # half of the CISM cell
            map_overlaps = np.logical_and(col == lnd_pt, S > 0.5)
            cism_map_indices = row[map_overlaps]
            cism_cells = [find_index_from_lat_lon(domg_lat, domg_lon,
                                                  yc_b[i], xc_b[i])
                          for i in cism_map_indices]

            for cism_cell in cism_cells:
                if (g2x_ice[cism_cell]):
                    cism_land_index[cism_cell] = lnd_pt
                    cism_assigned[cism_cell] = True
                    cism_data[cism_cell] = interpolator.get_value(
                        cism_ec[cism_cell], g2x_topo[cism_cell])
                    cism_glint_data[cism_cell] = interpolator.get_glint_value(
                        cism_ec[cism_cell], g2x_topo[cism_cell])

    # Create netcdf file
    output_data = Dataset(options.output_filename, 'w')
    timedim = output_data.createDimension('time', None)
    ydim = output_data.createDimension('y', cism_shape[1])
    xdim = output_data.createDimension('x', cism_shape[2])
    cism_land_index_var = output_data.createVariable('land_index', 'i4',
                                                      ('time','y','x'),
                                                      fill_value=-1)
    cism_land_index_var[:] = np.ma.masked_where(np.logical_not(cism_assigned),
                                                cism_land_index)
    cism_smb_var = output_data.createVariable('smb', 'f8',
                                              ('time','y','x'),
                                              fill_value=1e30)
    cism_smb_var[:] = np.ma.masked_where(np.logical_not(cism_assigned),
                                         cism_data)
    cism_glint_smb_var = output_data.createVariable('glint_smb', 'f8',
                                              ('time','y','x'),
                                              fill_value=1e30)
    cism_glint_smb_var[:] = np.ma.masked_where(np.logical_not(cism_assigned),
                                         cism_glint_data)
    output_data.close()


if __name__ == "__main__":
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        if options.backtrace:
            traceback.print_exc()
        sys.exit(1)


