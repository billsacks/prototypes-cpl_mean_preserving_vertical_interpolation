#!/usr/bin/env python

from __future__ import print_function
from __future__ import division

import sys
import os.path

if sys.hexversion < 0x02070000:
    print(70 * "*")
    print("ERROR: {0} requires python >= 2.7.x. ".format(sys.argv[0]))
    print("It appears that you are running python {0}".format(
        ".".join(str(x) for x in sys.version_info[0:3])))
    print(70 * "*")
    sys.exit(1)

import argparse

from interpolator import Interpolator

def commandline_options():
    """Process command-line arguments"""

    parser = argparse.ArgumentParser(
        description = 'Creates plots of interpolations from one or more input files',
        epilog = """Each file is expected to be formatted as follows:
        nelev (int)
        elevclass_bounds (list of floats; length nelev+1)
        topo (list of floats; length nelev)
        field (list of floats; length nelev)

        For example:
        3
        0. 10. 20. 30.
        5. 15. 25.
        -3. 7. 15.
        """
        )

    parser.add_argument('files', nargs='+',
                        help='names of file(s) containing profiles to plot')

    parser.add_argument('--backtrace', action='store_true',
                        help='show exception backtraces as extra debugging output')

    options = parser.parse_args()
    return options

        
def main(options):
    for input_filename in options.files:
        file_base = os.path.splitext(input_filename)[0]
        interp = Interpolator.from_file(input_filename, 1e5)
        interp.draw_figure(file_base + '.pdf')

if __name__ == "__main__":
    options = commandline_options()
    try:
        status = main(options)
        sys.exit(status)
    except Exception as error:
        print(str(error))
        if options.backtrace:
            traceback.print_exc()
        sys.exit(1)

